{"version":3,"sources":["helpers/roundDecimalToTwo.js","components/view/OrderItemSummary.js","actions/order/getOrderDetails.js","actions/payment/payOrder.js","actions/order/deliverOrder.js","pages/Order.js"],"names":["roundDecimalToTwo","num","Math","round","toFixed","useStyles","makeStyles","theme","root","display","minHeight","minWidth","height","boxShadow","details","flexDirection","cover","width","padding","spacing","OrderItemSummary","item","classes","className","image","title","name","to","product_id","style","textDecoration","price","quantity","ORDER_DETAILS_FAILURE","ORDER_STATUS","ORDER_DETAILS_REQUEST_START","ORDER_DETAILS_SUCCESS","getOrderDetails","id","dispatch","getState","a","type","userInfo","userLogin","config","headers","Authorization","token","axios","get","data","payload","response","message","ORDER_PAYMENT_FAILURE","ORDER_PAYMENT_REQUEST_START","ORDER_PAYMENT_SUCCESS","orderPay","orderId","paymentResult","put","ORDER_DELIVER_SUCCESS","ORDER_DELIVER_FAILURE","ORDER_DELIVER_REQUEST","deliverOrder","order","_id","logout","ORDER_PAYMENT_RESET","ORDER_DELIVER_RESET","marginTop","marginBottom","Order","match","history","useState","sdkReady","setSdkReady","params","useDispatch","orderDetails","useSelector","state","isLoading","error","loadingPay","successPay","isSuccess","orderDeliver","loadingDeliver","successDeliver","isSucesss","itemsPrice","orderItems","reduce","acc","useEffect","push","clientId","script","document","createElement","src","async","onload","body","appendChild","addPayPalScript","console","log","successPaymentHandler","useCallback","payOrder","deliverHandler","Grid","container","Alert","severity","xs","sm","Typography","componen","variant","toUpperCase","List","dense","component","color","ListItem","ListItemText","primary","secondary","user","email","shippingAddress","address","city","_state","zipCode","country","isDelivered","deliveredAt","paymentMethod","isPaid","paidAt","Card","CardContent","gutterBottom","AlertTitle","map","taxPrice","shippingPrice","totalPrice","amount","onSuccess","isAdmin","Button","fullWidth","onClick"],"mappings":"uGAIeA,IAHW,SAACC,GAAD,QAAWC,KAAKC,MAAY,IAANF,GAAa,KAAKG,QAAQ,K,iCCD1E,oEAQMC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,OACTC,UAAU,GACVC,SAAU,IACVC,OAAO,GACPC,UAAW,QAMbC,QAAS,CACPL,QAAS,OACTM,cAAe,OAKjBC,MAAO,CACLC,MAAM,IACNL,OAAQ,GACRM,QAASX,EAAMY,QAAQ,QAkCZC,IA7BU,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACjBC,EAAUjB,IAElB,OACE,eAAC,IAAD,CAAMkB,UAAWD,EAAQd,KAAzB,UACA,cAAC,IAAD,CACEe,UAAWD,EAAQN,MACnBQ,MAAOH,EAAKG,MACZC,MAAOJ,EAAKK,OAEd,8BACE,eAAC,IAAD,WACE,cAAC,IAAD,UACA,cAAC,OAAD,CAAMC,GAAE,mBAAcN,EAAKO,YAAcC,MAAO,CAAEC,eAAe,QAAjE,SACGT,EAAKK,SAGR,cAAC,IAAD,UAEH,yCAAYL,EAAKU,MAAjB,MAA2BV,EAAKW,SAAhC,OAA8CX,EAAKU,MAAnD,MAA6DV,EAAKW,SAAlE,mB,0OChDDC,EAICC,IAJDD,sBACAE,EAGCD,IAHDC,4BACAC,EAECF,IAFDE,sBAoCWC,EA/BS,SAACC,GAAD,8CAAQ,WAAOC,EAASC,GAAhB,6BAAAC,EAAA,sEAE1BF,EAAS,CACPG,KAAMP,IAHkB,EAKGK,IAAbG,EALU,EAKrBC,UAAWD,SACVE,EAAS,CACbC,QAAS,CACPC,cAAc,UAAD,OAAYJ,EAASK,SARZ,SAYHC,IAAMC,IAAN,sBAA0BZ,GAAMO,GAZ7B,gBAYlBM,EAZkB,EAYlBA,KAKVZ,EAAS,CACLG,KAAMN,EACNgB,QAASD,IAnBe,kDAuB1BZ,EAAS,CACPG,KAAMT,EACNmB,QAAO,gDAAE,KAAOC,gBAAT,iBAAE,EAAiBF,YAAnB,aAAE,EAAuBG,eAAzB,QAAoC,KAAMA,UAzBzB,0DAAR,yD,SCPpBC,EAICrB,IAJDqB,sBACAC,EAGCtB,IAHDsB,4BACAC,EAECvB,IAFDuB,sBAqCWC,EAhCE,SAACC,EAAQC,GAAT,8CAA2B,WAAOrB,EAASC,GAAhB,6BAAAC,EAAA,sEAEtCF,EAAS,CACPG,KAAMc,IAH8B,EAKThB,IAAbG,EALsB,EAKjCC,UAAWD,SACVE,EAAS,CACbC,QAAS,CACR,eAAe,mBACdC,cAAc,UAAD,OAAYJ,EAASK,SATA,SAafC,IAAMY,IAAN,sBAA0BF,EAA1B,QAAwCC,EAAef,GAbxC,gBAa9BM,EAb8B,EAa9BA,KAKVZ,EAAS,CACLG,KAAMe,EACNL,QAASD,IApB2B,kDAwBtCZ,EAAS,CACPG,KAAMa,EACNH,QAAO,gDAAG,KAAOC,gBAAV,iBAAG,EAAiBF,YAApB,aAAG,EAAuBG,eAA1B,QAAqC,KAAMA,UA1Bd,0DAA3B,yD,QCRbQ,EAIC5B,IAJD4B,sBACAC,EAGC7B,IAHD6B,sBACAC,EAEC9B,IAFD8B,sBAoDWC,EA1CO,SAACC,GAAD,8CAAW,WAAO3B,EAAUC,GAAjB,yBAAAC,EAAA,sEAE3BF,EAAS,CACPG,KAAMsB,IAHmB,EAQvBxB,IADWG,EAPY,EAOzBC,UAAaD,SAGTE,EAAS,CACbC,QAAS,CACPC,cAAc,UAAD,OAAYJ,EAASK,SAZX,SAgBJC,IAAMY,IAAN,sBACNK,EAAMC,IADA,YAErB,GACAtB,GAnByB,gBAgBnBM,EAhBmB,EAgBnBA,KAMRZ,EAAS,CACPG,KAAMoB,EACNV,QAASD,IAxBgB,kDA+BX,kCAJVG,EACJ,KAAMD,UAAY,KAAMA,SAASF,KAAKG,QAClC,KAAMD,SAASF,KAAKG,QACpB,KAAMA,UAEVf,EAAS6B,eAEX7B,EAAS,CACPG,KAAKqB,EAELX,QAASE,IArCgB,0DAAX,yD,gBCSfe,EAAiEnC,IAAjEmC,oBAAoBC,EAA6CpC,IAA7CoC,oBAAoBb,EAAyBvB,IAAzBuB,sBAGzCpD,EAAYC,YAAW,CAC3BE,KAAM,CACJG,SAAU,IACV4D,UAAW,OACX1D,UAAW,wCACXH,UAAW,SAGbe,MAAO,CACL8C,UAAU,OACVC,aAAa,UAmbFC,UA9aD,SAAC,GAAqB,IAAD,EAAnBC,EAAmB,EAAnBA,MAAMC,EAAa,EAAbA,QACdrD,EAAUjB,IAClB,EAAgCuE,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACMnB,EAAUe,EAAMK,OAAOzC,GACvBC,EAAWyC,cAEXC,EAAeC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,gBACzCG,EAAwBH,EAAxBG,UAAUlB,EAAce,EAAdf,MAAMmB,EAAQJ,EAARI,MAGjB3B,EAAWwB,aAAY,SAACC,GAAD,OAAWA,EAAMzB,YAC3B4B,EAAsC5B,EAAjD0B,UAAkCG,EAAe7B,EAA1B8B,UAGvB7C,EADUuC,aAAY,SAACC,GAAD,OAAWA,EAAMvC,aACvCD,SAGF8C,EAAeP,aAAY,SAACC,GAAD,OAAWA,EAAMM,gBAC/BC,EAA8CD,EAAzDL,UAAsCO,EAAmBF,EAA9BG,UAG7BR,IAEJlB,EAAM2B,WAAa7F,YACjBkE,EAAM4B,WAAWC,QAAO,SAACC,EAAK3E,GAAN,OAAe2E,EAAM3E,EAAKU,MAAQV,EAAKW,WAAU,KAK7EiE,qBAAU,WACJtD,GACFgC,EAAQuB,KAAK,YAEd,CAACvD,EAASgC,IAEbsB,qBAAU,YACW,uCAAG,gCAAAxD,EAAA,sEACaQ,IAAMC,IAAI,sBADvB,gBACNiD,EADM,EACZhD,MACFiD,EAASC,SAASC,cAAc,WAC/B5D,KAAO,kBACd0D,EAAOG,IAAP,kDAAwDJ,GACxDC,EAAOI,OAAQ,EACfJ,EAAOK,OAAS,WACd3B,GAAY,IAEduB,SAASK,KAAKC,YAAYP,GATN,4CAAH,qDAWnBQ,KACC,IAEHX,qBAAU,aAEH/B,GAASqB,GAAcI,GAAkBzB,EAAMC,MAAQR,KAC1DpB,EAAS,CAAEG,KAAMe,IACjBlB,EAAS,CAAEG,KAAM4B,IACjB/B,EAASF,EAAgBsB,OAE1B,CAACpB,EAAUoB,EAAS4B,EAAYrB,EAAMvB,EAASgD,IAIlDM,qBAAU,aACJ/B,GAASqB,GAAYI,GAAmBzB,EAAMC,MAAQR,KACxDpB,EAAS,CAAEG,KAAM2B,IACjB9B,EAAS,CAAEG,KAAM4B,IACjB/B,EAASF,EAAgBsB,OAG1B,CAACO,EAAMqB,EAAW5B,EAAQpB,EAASoD,IAItCkB,QAAQC,IAAI5C,GAEZ,IAAM6C,EAAwBC,uBAAY,SAACpD,GACzCiD,QAAQC,IAAIlD,GACZrB,EAAS0E,EAAStD,EAASC,MAC3B,CAACD,EAAQpB,IAEL2E,EAAiBF,uBAAY,WACjCzE,EAAS0B,EAAaC,MACtB,CAAC3B,EAAS2B,IAER,OACI,mCACA,eAACiD,EAAA,EAAD,CACDC,WAAS,EADR,UAEChC,GAAa,cAACiC,EAAA,EAAD,gCACZjC,GAAaC,GAAS,cAACgC,EAAA,EAAD,CAAOC,SAAS,QAAhB,SAAyBjC,KAC/CD,IAAcC,GACd,qCACC,eAAC8B,EAAA,EAAD,CAAM9F,MAAI,EAACkG,GAAI,GAAIC,GAAI,EAAvB,UACD,cAACC,EAAA,EAAD,CACAlG,UAAWD,EAAQG,MACnBiG,SAAS,MAAMC,QAAQ,KAFvB,SAGD,eAACN,EAAA,EAAD,CAAOC,SAAS,OAAhB,2BAAqC,mCAAS,UAAGpD,EAAMC,KAAMyD,cAAxB,YAEpC,eAACC,EAAA,EAAD,CAAMC,OAAK,EAAEC,UAAU,MAAM,aAAW,WAAxC,UACA,cAACN,EAAA,EAAD,CAAYM,UAAU,OAAOJ,QAAQ,KAAKK,MAAM,cAAhD,SACG,4DAKH,cAACC,EAAA,EAAD,UACA,cAACC,EAAA,EAAD,CAAcC,QAAQ,OAAOC,UAAWlE,EAAMmE,KAAK3G,SAEnD,cAACuG,EAAA,EAAD,UACA,cAACC,EAAA,EAAD,CAAcC,QAAQ,QAAQC,UAC5B,cAAC,OAAD,CAAMzG,GAAE,iBAAYuC,EAAMmE,KAAKC,OAA/B,SACGpE,EAAMmE,KAAKC,YAKhB,cAACL,EAAA,EAAD,UACA,cAACC,EAAA,EAAD,CAAcC,QAAQ,UAAUC,UAC9B,qCACClE,EAAMqE,gBAAgBC,QACvB,uBACCtE,EAAMqE,gBAAgBE,KAHvB,KAG+BvE,EAAMqE,gBAAgBG,OAHrD,IAG8DxE,EAAMqE,gBAAgBI,QAHpF,KAIIzE,EAAMqE,gBAAgBK,eAK5B,cAACX,EAAA,EAAD,UACA,cAACC,EAAA,EAAD,CAAcC,QAAQ,iBAAiBC,UACrC,qCACClE,EAAM2E,YAAgB,eAACxB,EAAA,EAAD,CAAOC,SAAS,UAAhB,2BAAyCpD,EAAM4E,eAAuB,cAACzB,EAAA,EAAD,CAAOC,SAAS,UAAhB,wCAC7F,iCAMF,uBACA,eAACO,EAAA,EAAD,CAAMC,OAAK,EAAEC,UAAU,MAAM,aAAW,kBAAxC,UACA,cAACN,EAAA,EAAD,CAAYM,UAAU,OAAOJ,QAAQ,KAAKK,MAAM,cAAhD,SACG,yDAKH,cAACC,EAAA,EAAD,UACA,cAACC,EAAA,EAAD,CAAcC,QAAQ,OAAOC,UAAWlE,EAAMmE,KAAK3G,SAEnD,cAACuG,EAAA,EAAD,UACA,cAACC,EAAA,EAAD,CAAcC,QAAQ,QAAQC,UAC5B,cAAC,OAAD,CAAMzG,GAAE,iBAAYuC,EAAMmE,KAAKC,OAA/B,SACGpE,EAAMmE,KAAKC,YAKhB,cAACL,EAAA,EAAD,UACA,cAACC,EAAA,EAAD,CAAcC,QAAQ,UAAUC,UAC9B,qCACClE,EAAMqE,gBAAgBC,QACvB,uBACCtE,EAAMqE,gBAAgBE,KAHvB,KAG+BvE,EAAMqE,gBAAgBG,OAHrD,IAG8DxE,EAAMqE,gBAAgBI,QAHpF,KAIIzE,EAAMqE,gBAAgBK,eAK5B,cAACX,EAAA,EAAD,UACA,cAACC,EAAA,EAAD,CAAcC,QAAQ,iBAAiBC,UAAS,iBAAElE,QAAF,IAAEA,OAAF,EAAEA,EAAO6E,qBAAT,QAA0B,8BAE1E,cAACd,EAAA,EAAD,UACA,cAACC,EAAA,EAAD,CAAcC,QAAQ,cAAcC,UAClC,qCACClE,EAAM8E,OAAW,eAAC3B,EAAA,EAAD,CAAOC,SAAS,UAAhB,sBAAoCpD,EAAM+E,UAAkB,cAAC5B,EAAA,EAAD,CAAOC,SAAS,UAAhB,mCAC9E,oCAOF,uBACA,cAACH,EAAA,EAAD,CAAM9F,MAAI,EAACkG,GAAI,GAAIC,GAAI,EAAvB,SACA,eAAC0B,EAAA,EAAD,CAAM3H,UAAWD,EAAQd,KAAzB,UACE,eAAC2I,EAAA,EAAD,WACJ,cAAC1B,EAAA,EAAD,CAAa2B,cAAY,EAAzB,SACC,yDAEuB,IAArBlF,EAAM4B,YACF,eAACuB,EAAA,EAAD,CAAOC,SAAS,OAAhB,UACA,cAAC+B,EAAA,EAAD,mBADA,wBAMP,cAACxB,EAAA,EAAD,CAAOC,OAAK,EAAZ,SACM5D,EAAM4B,WAAWwD,KAAI,SAAAjI,GAAI,OACtB,mCACA,cAAC4G,EAAA,EAAD,UACD,cAAC7G,EAAA,EAAD,CAAwCC,KAAMA,GAAvBA,EAAKO,aADZP,EAAKO,mBAMzB,eAACiG,EAAA,EAAD,CAAMC,OAAK,EAAX,UACI,eAACG,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAcC,QAAQ,aAD1B,IAEOjE,EAAM2B,cAGb,eAACoC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAcC,QAAQ,QAD1B,IAEOjE,EAAMqF,YAEb,eAACtB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAcC,QAAQ,aAD1B,IAEOjE,EAAMsF,iBAEb,eAACvB,EAAA,EAAD,WAEI,cAACC,EAAA,EAAD,CAAcC,QAAQ,UACtB,uCACGjE,EAAMuF,oBAIhBpE,GACE,eAACgC,EAAA,EAAD,CAAOC,SAAS,QAAhB,UACA,cAAC+B,EAAA,EAAD,oBACEhE,SAYLnB,EAAM8E,QACC,qCACA1D,GAAc,cAAC+B,EAAA,EAAD,CAAOC,SAAS,OAAhB,wBACbzC,EAGA,cAAC,eAAD,CACE6E,OAAQxF,EAAMuF,WACdE,UAAW5C,IAJb,cAACM,EAAA,EAAD,CAAOC,SAAS,OAAhB,2BAUL5B,GAAkB,4CACf/C,GACFA,EAASiH,SACT1F,EAAM8E,SACL9E,EAAM2E,aACL,mCACE,cAACgB,EAAA,EAAD,CACEC,WAAS,EACTnC,QAAQ,YACRK,MAAM,UACN+B,QAAS7C,EAJX","file":"static/js/24.fd6740a1.chunk.js","sourcesContent":["\nconst roundDecimalToTwo = (num) => +(Math.round(num * 100) / 100).toFixed(2)\n  \n\nexport default roundDecimalToTwo","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport {Link} from 'react-router-dom'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    minHeight:90,\n    minWidth: 250,\n    height:90,\n    boxShadow: 'none',\n  \n\n\n\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'row',\n  },\n//   content: {\n//     flexGrow: 1,\n//   },\n  cover: {\n    width:152,\n    height: 90,\n    padding: theme.spacing(2),\n  },\n\n}));\n\nconst OrderItemSummary = ({item}) => {\n    const classes = useStyles();\n  \n  return (\n    <Card className={classes.root}>\n    <CardMedia\n      className={classes.cover}\n      image={item.image}\n      title={item.name}\n    />\n    <div >\n      <CardContent>\n        <Typography >\n        <Link to={`/product/${item.product_id}`} style={{ textDecoration:'none'}}>\n          {item.name}\n          </Link>\n        </Typography>\n        <Typography  \n        >\n     <strong>   {item.price} * {item.quantity} =  {item.price} * {item.quantity} </strong>\n        </Typography>\n      </CardContent>\n        \n    </div>\n  \n  </Card>\n  );\n}\n\nexport default OrderItemSummary\n","\nimport axios from \"axios\"\n\nimport ORDER_STATUS from \"../../constants/orderConstants\";\n\nconst {\n    ORDER_DETAILS_FAILURE,\n    ORDER_DETAILS_REQUEST_START,\n    ORDER_DETAILS_SUCCESS\n     \n } = ORDER_STATUS;\n \n\nconst getOrderDetails = (id) => async (dispatch,getState) => {\n    try {\n      dispatch({\n        type: ORDER_DETAILS_REQUEST_START,\n      })\n    const {userLogin:{userInfo}} = getState()\n      const config = {\n        headers: {\n          Authorization: `Bearer ${userInfo.token}`\n        },\n      }\n  \n      const { data } = await axios.get( `/api/orders/${id}`, config\n      )\n  \n   \n\n    dispatch({  \n        type: ORDER_DETAILS_SUCCESS,\n        payload: data,\n      })\n     \n    } catch (error) {\n      dispatch({\n        type: ORDER_DETAILS_FAILURE,\n        payload: error?.response?.data?.message ?? error.message\n         \n      })\n    }\n  }\n\nexport default getOrderDetails","\nimport axios from \"axios\"\n\nimport ORDER_STATUS from \"../../constants/orderConstants\";\n\nconst {\n    ORDER_PAYMENT_FAILURE,\n    ORDER_PAYMENT_REQUEST_START,\n    ORDER_PAYMENT_SUCCESS\n     \n } = ORDER_STATUS;\n \n\nconst orderPay = (orderId,paymentResult) => async (dispatch,getState) => {\n    try {\n      dispatch({\n        type: ORDER_PAYMENT_REQUEST_START,\n      })\n    const {userLogin:{userInfo}} = getState()\n      const config = {\n        headers: {\n         'Content-Type':'application/json',\n          Authorization: `Bearer ${userInfo.token}`\n        },\n      }\n  \n      const { data } = await axios.put( `/api/orders/${orderId}/pay`,paymentResult, config\n      )\n  \n   \n\n    dispatch({  \n        type: ORDER_PAYMENT_SUCCESS,\n        payload: data,\n      })\n     \n    } catch (error) {\n      dispatch({\n        type: ORDER_PAYMENT_FAILURE,\n        payload:  error?.response?.data?.message ?? error.message\n         \n      })\n    }\n  }\n\nexport default orderPay;","import axios from \"axios\"\n\nimport ORDER_STATUS from \"../../constants/orderConstants\";\nimport logout from \"../user/logout\"\nconst {\n    ORDER_DELIVER_SUCCESS,\n    ORDER_DELIVER_FAILURE,\n    ORDER_DELIVER_REQUEST,\n     \n } = ORDER_STATUS;\n \n \n \n \n \n \n \n const deliverOrder = (order) => async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: ORDER_DELIVER_REQUEST,\n      })\n  \n      const {\n        userLogin: { userInfo },\n      } = getState()\n  \n      const config = {\n        headers: {\n          Authorization: `Bearer ${userInfo.token}`,\n        },\n      }\n  \n      const { data } = await axios.put(\n        `/api/orders/${order._id}/deliver`,\n        {},\n        config\n      )\n  \n      dispatch({\n        type: ORDER_DELIVER_SUCCESS,\n        payload: data,\n      })\n    } catch (error) {\n      const message =\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message\n      if (message === 'Not authorized, token failed') {\n        dispatch(logout())\n      }\n      dispatch({\n        type:ORDER_DELIVER_FAILURE,\n        \n        payload: message,\n      })\n    }\n  }\n\nexport default deliverOrder","import {useCallback, useEffect,useState,useLayoutEffect} from 'react'\n\n\nimport axios from 'axios'\n\nimport {useDispatch,useSelector} from 'react-redux'\nimport Button from '@material-ui/core/Button';\nimport {Link} from 'react-router-dom'\nimport { PayPalButton } from 'react-paypal-button-v2'\nimport { Alert,AlertTitle } from '@material-ui/lab';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport getOrderDetails from '../actions/order/getOrderDetails'\nimport roundDecimalToTwo from '../helpers/roundDecimalToTwo'\nimport payOrder from '../actions/payment/payOrder'\nimport deliverOrder from '../actions/order/deliverOrder'\nimport ORDER_STATUS from '../constants/orderConstants'\nimport OrderItemSummary from '../components/view/OrderItemSummary';\n\nconst {ORDER_PAYMENT_RESET,ORDER_DELIVER_RESET,ORDER_PAYMENT_SUCCESS} = ORDER_STATUS\n\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 205,\n    marginTop: '20px',\n    boxShadow: 'rgba(149, 157, 165, 0.2) 0px 8px 24px',\n    minHeight: '650px'\n    \n  },\n  title: {\n    marginTop:'3rem',\n    marginBottom:'3rem',\n  },\n \n});\n\nconst Order = ({match,history}) => {\n  const classes = useStyles();\nconst [sdkReady, setSdkReady] = useState(false)\nconst orderId = match.params.id\nconst dispatch = useDispatch()\n   \nconst orderDetails = useSelector(state => state.orderDetails)\nconst {isLoading,order,error} =orderDetails\n\n\nconst orderPay = useSelector((state) => state.orderPay)\nconst { isLoading: loadingPay, isSuccess: successPay } = orderPay\n\nconst userLogin = useSelector((state) => state.userLogin)\nconst { userInfo } = userLogin\n\n\nconst orderDeliver = useSelector((state) => state.orderDeliver)\nconst { isLoading: loadingDeliver, isSucesss: successDeliver } = orderDeliver\n\n\n if (!isLoading) {\n  //   Calculate prices\n  order.itemsPrice = roundDecimalToTwo (\n    order.orderItems.reduce((acc, item) => acc + item.price * item.quantity, 0)\n  )\n}\n\n\nuseEffect(() => {\n  if(!userInfo){\n    history.push('/login')\n  }\n}, [userInfo,history])\n\nuseEffect(() => {\nconst addPayPalScript = async () => {\n    const { data: clientId } = await axios.get('/api/config/paypal')\n    const script = document.createElement('script')\n    script.type = 'text/javascript'\n    script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`\n    script.async = true\n    script.onload = () => {\n      setSdkReady(true)\n    }\n    document.body.appendChild(script)\n  } \n  addPayPalScript()\n} ,[])\n\nuseEffect(() => {\n\n  if (!order || successPay || successDeliver || order._id !== orderId) {\n    dispatch({ type: ORDER_PAYMENT_SUCCESS })\n    dispatch({ type: ORDER_DELIVER_RESET })\n    dispatch(getOrderDetails(orderId))\n  }  \n}, [dispatch, orderId, successPay, order,userInfo,successDeliver])\n\n\n\nuseEffect(() => {\n  if(!order || successPay||successDeliver  || order._id !== orderId){\n    dispatch({ type: ORDER_PAYMENT_RESET })\n    dispatch({ type: ORDER_DELIVER_RESET })\n    dispatch(getOrderDetails(orderId))\n  }\n\n}, [order,successPay,orderId,dispatch,successDeliver])\n\n\n\nconsole.log(order)\n// Handle paypal payment\nconst successPaymentHandler = useCallback((paymentResult) => {\n  console.log(paymentResult)\n  dispatch(payOrder(orderId, paymentResult))\n},[orderId,dispatch])\n\nconst deliverHandler = useCallback(() => {\n  dispatch(deliverOrder(order))\n},[dispatch,order])\n\n    return (\n        <>\n        <Grid  \n       container >\n        {isLoading && <Alert>Loading order...</Alert> }\n        {!isLoading && error && <Alert severity=\"error\">{error}</Alert>}\n        {!isLoading && !error && (\n          <>\n           <Grid item xs={12} sm={8}>\n          <Typography \n          className={classes.title}\n          componen=\"div\" variant=\"h6\" > \n         <Alert severity=\"info\"> Order Number <strong>{`${order._id}`.toUpperCase()} </strong></Alert>\n          </Typography>\n          <List dense  component=\"nav\" aria-label=\"shipping\"> \n          <Typography component=\"span\" variant=\"h6\" color=\"textPrimary\" >\n             <strong>   SHIPPING DETAILS </strong>\n              </Typography>\n          \n\n\n          <ListItem>\n          <ListItemText primary=\"Name\" secondary={order.user.name} />\n          </ListItem>\n          <ListItem>\n          <ListItemText primary=\"Email\" secondary={\n            <Link to={`mailto:${order.user.email}`}>\n              {order.user.email}\n            </Link>\n\n          } />\n          </ListItem>\n          <ListItem>\n          <ListItemText primary=\"Address\" secondary={\n            <>\n            {order.shippingAddress.address}\n            <br />\n            {order.shippingAddress.city}, {order.shippingAddress._state} {order.shippingAddress.zipCode}\n             , {order.shippingAddress.country}\n            </>\n\n          } />\n          </ListItem>\n          <ListItem>\n          <ListItemText primary=\"Deliver Status\" secondary={\n            <>  \n            {order.isDelivered ?   <Alert severity=\"success\"> Delivered on {order.deliveredAt}</Alert> : <Alert severity=\"warning\">Order is not delivered yet</Alert>}\n            <br />\n             </>\n          } />\n          </ListItem>\n          \n          </List>\n          <br/>\n          <List dense  component=\"nav\" aria-label=\"billing details\"> \n          <Typography component=\"span\" variant=\"h6\" color=\"textPrimary\" >\n             <strong> BILLING DETAILS </strong>\n              </Typography>\n          \n\n\n          <ListItem>\n          <ListItemText primary=\"Name\" secondary={order.user.name} />\n          </ListItem>\n          <ListItem>\n          <ListItemText primary=\"Email\" secondary={\n            <Link to={`mailto:${order.user.email}`}>\n              {order.user.email}\n            </Link>\n\n          } />\n          </ListItem>\n          <ListItem>\n          <ListItemText primary=\"Address\" secondary={\n            <>\n            {order.shippingAddress.address}\n            <br />\n            {order.shippingAddress.city}, {order.shippingAddress._state} {order.shippingAddress.zipCode}\n             , {order.shippingAddress.country}\n            </>\n\n          } />\n          </ListItem>\n          <ListItem>\n          <ListItemText primary=\"Payment Method\" secondary={order?.paymentMethod ?? 'Choose a payment Method'} /> \n          </ListItem>\n          <ListItem>\n          <ListItemText primary=\"Paid Status\" secondary={\n            <>  \n            {order.isPaid ?   <Alert severity=\"success\"> Paid on {order.paidAt}</Alert> : <Alert severity=\"warning\">Order is not paid yet</Alert>}\n            <br />\n             </>\n          } />\n          </ListItem>\n          \n          </List>\n          </Grid>\n          <br/>\n          <Grid item xs={12} sm={4} >\n          <Card className={classes.root}>\n            <CardContent>\n        <Typography  gutterBottom>\n         <strong>   Order Summary </strong>\n          </Typography> \n          {order.orderItems === 0 && (\n               <Alert severity=\"info\">\n               <AlertTitle>Info</AlertTitle>\n                Your cart is empty\n             </Alert>\n          )}\n        \n        <List  dense>\n             {order.orderItems.map(item => (\n                 <>\n                 <ListItem key={item.product_id}>\n                <OrderItemSummary key={item.product_id} item={item} />\n                </ListItem>\n                </>\n          ))} \n         </List>\n            <List dense  >\n                <ListItem >  \n                    <ListItemText primary=\"Subtotal\"  />\n                     ${order.itemsPrice}\n                    \n                </ListItem> \n                <ListItem >\n                    <ListItemText primary=\"Tax\"/>\n                     ${order.taxPrice}\n                </ListItem>\n                <ListItem>\n                    <ListItemText primary=\"Shipping\" />\n                     ${order.shippingPrice}\n                </ListItem>\n                <ListItem>\n                    \n                    <ListItemText primary=\"Total\" />\n                    <strong>\n                     ${order.totalPrice}\n                    </strong>\n                </ListItem>\n            </List>\n            {error && (\n               <Alert severity=\"error\">\n               <AlertTitle>Error</AlertTitle>\n                {error}\n             </Alert>\n          )}\n            {/* <Button \n        disabled={cartItems === 0}\n        variant=\"contained\" \n        color=\"primary\"\n        onClick={placeOrderHandler}\n        >\n            Place Order\n            </Button> */}\n          </CardContent> \n          {!order.isPaid && (\n                   <>\n                  {loadingPay && <Alert severity=\"info\">Loading...</Alert>}\n                  {!sdkReady ? (\n                    <Alert severity=\"info\">Loading...</Alert>\n                  ) : (\n                    <PayPalButton\n                      amount={order.totalPrice}\n                      onSuccess={successPaymentHandler}\n                    />\n                   \n                  )}\n               </>\n              )}\n              {loadingDeliver && <h4>Loading...</h4>}\n                 {userInfo &&\n                userInfo.isAdmin &&\n                order.isPaid &&\n                !order.isDelivered && (\n                  <>\n                    <Button\n                      fullWidth\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={deliverHandler}\n                    >\n                      Mark As Delivered\n                    </Button>\n                  </>\n                )}\n        </Card>\n        </Grid>\n         \n          {/* <Row>\n            <Col md={8}>\n              <ListGroup variant=\"flush\"> */}\n                  {/* <ol className=\"shadow-sm rounded p-3 my-2\">\n                      <h3 className=\"fs-3\">SHIPPING</h3>\n                       \n                         <strong>Adress Info:</strong>\n                         <>\n                        <ul><strong>Name:{order.user.name}</strong></ul>\n                        <ul><a href={`mailto:${order.user.email}`}> Email:{order.user.email}</a></ul> \n                        </>\n                       <ul> {order.shippingAddress.address},</ul>\n                        <ul>{order.shippingAddress.city}, {order.shippingAddress._state}{\"\"}{order.shippingAddress.zipCode}</ul>\n                        <ul>{order.shippingAddress.country}</ul>\n                        <span className=\"my-4\">\n                            \n                        <ul><strong>Deliver Status:</strong></ul>\n                        {order.isDelivered ? <ul><strong>Deliver Status:</strong> \n                        <Alert severity=\"success\"> Delivered on {order.deliveredAt}</Alert>\n                        </ul> \n                        : <Alert severity=\"warning\">Order is not delivered yet</Alert>\n                        }\n                        </span>\n  \n                  </ol> */}\n                  {/* <ol className=\"shadow-sm rounded p-3 my-2\">\n                      <h2 className=\"fs-2\">BILLING</h2>\n                     \n                      <span>\n                        <strong>Billing Info:</strong>\n                        <ul><strong>{order.user.name}</strong></ul>\n                        <ul> {order.shippingAddress.address},</ul>\n                        <ul>{order.shippingAddress.city}, {order.shippingAddress._state}{\"\"}{order.shippingAddress.zipCode}</ul>\n                        <ul>{order.shippingAddress.country}</ul> \n                      </span>\n                  </ol> */}\n                  {/* <ol className=\"shadow-sm rounded p-3 my-2\">\n                      <h3 className=\"fs-3\">PAYMENT</h3>\n                     \n                        <span className=\"my-4\">\n                            <strong>Payment Method:</strong>\n                        <ul>{order?.paymentMethod ?? 'Choose a payment Method'}</ul>\n                        {order.isPaid ? <ul><strong>Payment Status:</strong> \n                        <Alert severity=\"success\"> Paid on {order.paidAt}</Alert></ul> \n                          : <Alert severity=\"warning\">Order is not paid yet</Alert>\n                          }\n                        </span>\n                      \n                   \n                  </ol> */}\n                  {/* <ol >\n                      <h2 className=\"fs-2 my-5 text-center\">ORDER DETAILS</h2>\n                      <span>\n                        <strong>Items:</strong>\n                        {order.orderItems.legth === 0 && <Alert>Your order is empty</Alert>}\n                        <ListGroup variant=\"flush\">\n                          {order.orderItems.map(item =>(\n                            <ul key={item._id} className=\"shadow-sm rounded p-3 my-2\">\n                              <Row>\n                                <Col md={2}>\n                                    <Image src={item.image} alt={item.name} fluid rounded/>\n                                 </Col>\n                                <Col >\n                                  <Link to={`/product/${item.product_id}`} style={{ textDecoration:'none'}}>\n                                    <h5>{item.name}</h5>\n                                  </Link>\n                                </Col>\n                                <Col md={4}>\n                                 {item.price} * {item.quantity} =  {item.price} * {item.quantity}\n                                </Col>\n                                  \n                                 \n                               \n                              </Row>\n                           </ul>\n                          ))}\n                        </ListGroup>\n                      </span>\n                  </ol>\n              </ListGroup>\n            </Col>\n            <Col md={4}>\n          <Card>\n            <ListGroup  >\n              <ol>\n                <h2>Order Summary</h2>\n              </ol>\n              <ul>\n                <Row>\n                  <Col>Items</Col>\n                  <Col>${order.itemsPrice}</Col>\n                </Row>\n              </ul>\n              <ul>\n                <Row>\n                  <Col>Shipping</Col>\n                  <Col>${order.shippingPrice}</Col>\n                </Row>\n              </ul>\n              <ul>\n                <Row>\n                  <Col>Tax</Col>\n                  <Col>${order.taxPrice}</Col>\n                </Row>\n              </ul>\n              <ul>\n                <Row>\n                  <Col>Total</Col>\n                  <Col>${order.totalPrice}</Col>\n                </Row>\n              </ul>\n              <Container>\n                \n                  {!order.isPaid && (\n                   <>\n                  {loadingPay && <Alert severity=\"info\">Loading...</Alert>}\n                  {!sdkReady ? (\n                    <Alert severity=\"info\">Loading...</Alert>\n                  ) : (\n                    <PayPalButton\n                      amount={order.totalPrice}\n                      onSuccess={successPaymentHandler}\n                    />\n                   \n                  )}\n               </>\n              )}\n              {loadingDeliver && <h4>Loading...</h4>}\n                 {userInfo &&\n                userInfo.isAdmin &&\n                order.isPaid &&\n                !order.isDelivered && (\n                  <>\n                    <Button\n                      type='button'\n                      className='btn w-100 mb-3'\n                      onClick={deliverHandler}\n                    >\n                      Mark As Delivered\n                    </Button>\n                  </>\n                )}\n        \n              </Container>\n             \n            </ListGroup>\n          </Card>\n        </Col>\n          </Row>  */}\n          </>\n        )  \n                          }\n                          </Grid>\n                          </>\n    )\n}\n\nexport default Order"],"sourceRoot":""}